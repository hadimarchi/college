Date: 09/05/2018

Summations:
  sum(i) from i=1 to i=n = n(n+1)/2 ~= n^2/2
  sum(i^2) from i=1 to i=n ~= n^3/3
  sum(i) from i=l to i=u = sum(i)1-u - sum(i)1-l
  sum(a^i) from 0 to n = 1 + a + a^2 ... + a^n = (a^n+1 -1)/(a-1)
    - sum(10^i) = (10^n+1 -1)/(10-1)
  sum(i*2i) from i=1 to i=n = (n-1)(2^n+1) + 2
  sum(1/i) from 0 to n does not converge
    - approximately ln(n) + y(oiler's constant, approx 0.5772)
Combinatorics:
  permutations of 1 - n = n!
  nCk = n!/((n-k)! * k!)
  number subsets of set N of size n = 2^n
  sum(nCk) from k=0 to k=n = 2^n
  sum(1) from i=l to i=u = u-l+1

Analysis:
  - Choose way of measuring input size
  - Choose basic operation
  - Does num of basic ops depend only on the size of input?
    - if it depends on property of input, need best/worst case
    - otherwise idea of input may need to be expande
  - Set up a summation
  - Evaluate summation

Recursive Analysis:
  - Same as iterative/regular analysis
  - Set up a recurrence
  - Solve the recurrence

  Examples:
    x(n) = x(n-1) +n; x(0) = 0
      Forward Substitution(start at 0):
        n     0 1 2 3 4  5  6  7
        x(n)  0 1 3 6 10 15 21 28
        guess: n(n+1)/2
              check: yada yada
      Backward Substitution(start at n):
        x(n) = x(n-1) + n
          x(n-1) = x(n-1 -1) + n-1 = x(n-2) + n-1
        x(n) = x(n-2) + n-1 + n
          x(n-2) = x(n-3) + n-2
        x(n) = x(n-3) + n -2 + n-1 + n
             = x(n-3) +3n -3
        generic:
          x(n) = x(n-i) + n-i+1 + ... n-i+i
          plug in i=n to get x(0) (our given case)
          x(n) = 0 + 1 + 2 + ... + i we recognize as sum of first i integers

    x(n) = 2x(n-1) + 1; x(1) = 1
      Forward:
        n    1 2 3 4  5  6
        x(n) 1 3 7 15 31 62

      Backward:
        x(n) = 2x(n-1) + 1
          x(n-1) = 2x(n-2) + 1
        x(n) = 2(2x(n-2) + 1) + 1
             = 4x(n-2) + 3
          x(n-2) = 2x(n-3) + 1
        x(n) = 4(2x(n-3) + 1) + 3
             = 8x(n-3) + 7
        generic: 2^ix(n-i) + 2^i-1 * i + 1
          plug in i=n-1 to get x(1) (our given case)
          2^i + 2^i-1(i) + 1
          2^n-1 + 2n -2 + 1
          2^n-1 + 2n -1
          test:
            x(3) = 2^2 + 2(3) -1 = 4+6-1

  Binary Search:
    x(n) = x(floor(n/2)) +1
      when n=2^k
        x(n) = x(n/2) + 1
